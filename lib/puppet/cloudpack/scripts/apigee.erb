#!/bin/bash
# This script is intended to be used with the install action
# of puppet-cloudpack

set -u
set -e

function rpm_install(){
  # Setup the yum Puppet repository
  cat >/etc/yum.repos.d/puppet.repo <<'EOFYUMREPO'
[puppetlabs]
name = Puppetlabs
baseurl = http://yum.puppetlabs.com/el/$releasever/products/$basearch/ 
gpgcheck = 1
enabled = 1
gpgkey = http://yum.puppetlabs.com/RPM-GPG-KEY-puppetlabs
EOFYUMREPO

  # Install Puppet from yum.puppetlabs.com
  yum install -y puppet
  yum install -y git
  yum install -y xfsprogs
}

function apt_install() {
  # Download and install the puppetlabs apt public
  apt-key adv --recv-key --keyserver pool.sks-keyservers.net 4BD6EC30
  
  # We need to grab the distro and release in order to populate
  # the apt repo details. We are assuming that the lsb_release command
  # will be available as even puppet evens has it (lsb_base) package as
  # dependancy.
  
  # Since puppet requires lsb-release I believe this is ok to use for
  # the purpose of distro and release discovery.
  apt-get update
  apt-get -y install lsb-release
  distro=$(lsb_release -i | cut -f 2 | tr "[:upper:]" "[:lower:]")
  release=$(lsb_release -c | cut -f 2)
  
  # Setup the apt Puppet repository
  cat > /etc/apt/sources.list.d/puppetlabs.list <<EOFAPTREPO
deb http://apt.puppetlabs.com/${distro}/ ${release} main
EOFAPTREPO
  apt-get update
  # Install Puppet from Debian repositories
  apt-get -y install puppet
  apt-get -y install git
  apt-get -y install xfsprogs
}

function install_puppet() {
  case ${breed} in 
    "redhat")
      rpm_install ;;
    "debian")
      apt_install ;;
  esac
}

function configure_puppet() {
  cat >/etc/puppet/puppet.conf <<'EOFPUPPETCONF'
[main]
  logdir = /var/log/puppet
  rundir = /var/run/puppet
  vardir = /var/lib/puppet
  ssldir = $vardir/ssl
  pluginsync = true
  report = true
  server = <%= options[:server] %>
  environment = <%= options[:environment] %>
  <% if options[:puppetagent_certname] %>
  certname = <%= options[:puppetagent_certname] %>
  <% end %>
EOFPUPPETCONF

  if [ -f /etc/default/puppet ]; then
    cat > /etc/default/puppet <<EOFPUPPETDEFAULT
# Defaults for puppet - sourced by /etc/init.d/puppet

# Start puppet on boot?
START=yes

# Startup options
DAEMON_OPTS=""
EOFPUPPETDEFAULT
  fi
}

function start_puppet() {
  /etc/init.d/puppet start
}

function install_facter_d_plugin() {
  git clone http://github.com/ripienaar/facter-facts.git  --depth 1 <%= options[:tmp_dir] %>/facter_d
  mkdir -p `puppet agent --configprint vardir`/lib/facter/
  cp <%= options[:tmp_dir] %>/facter_d/facts-dot-d/facter_dot_d.rb `puppet agent --configprint vardir`/lib/facter/
  mkdir -p /etc/facts.d
}
    
<% if options[:application] %>
function classify() {
  echo 'application=<%= options[:application] %>' > /etc/facts.d/application.txt
}
<% end %>

<% if options[:volumes] %>
function mount_volumes() {
  <% options[:volumes].each do |vol| %>
    mkfs.xfs <%= vol[:device] %>
    mkdir -p <%= vol[:mount] %>
    mount <%= vol[:device] %> <%= vol[:mount] %>
  <% end %>
}
<% end %>

<% if options[:certname] %>
function configure_ddns() {
  hostname <%= options[:certname] %>
  cat > /etc/sysconfig/network << DDNSEND
NETWORKING=yes
HOSTNAME=its01apigee.us-ea.i.apigee.com
NETWORKING_IPV6=no
DDNSEND
  curl http://<%= option[:server] %>/dist/ddns/<%= options[:certname].split('.',2)[-1] %>/ddnsupdate > <%= options[:tmp_dir] %>/ddnsupdate
  chmod +x <%= options[:tmp_dir] %>/ddnsupdate
  <%= options[:tmp_dir] %>/ddnsupdate <%= options[:certname].split('.',2)[0] %>
}
<% end %>

function provision_puppet() {
  if [ -f /etc/redhat-release ]; then
    export breed='redhat'
  elif [ -f /etc/debian_version ]; then
    export breed='debian'
  else
    echo "This OS is not supported by Puppet Cloud Provisioner"
    exit 1
  fi
  
  install_puppet
  configure_puppet
<% if options[:application] %>
  install_facter_d_plugin
  classify
<% end %>
<% if options[:volumes] %>
  mount_volumes
<% end %>
  configure_ddns
  start_puppet
  echo "Puppet installation finished!"
  exit 0
}

provision_puppet
